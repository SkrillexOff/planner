import { initializeApp } from "https://www.gstatic.com/firebasejs/9.18.0/firebase-app.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.18.0/firebase-auth.js";
import { getFirestore, collection, getDocs, addDoc, setDoc, deleteDoc } from "https://www.gstatic.com/firebasejs/9.18.0/firebase-firestore.js";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const firebaseConfig = {
  apiKey: "AIzaSyBYI_LCb4mld3VEfIOU9D49gLV81gKTovE",
  authDomain: "taskcalendarapp-bf3b3.firebaseapp.com",
  databaseURL: "https://taskcalendarapp-bf3b3-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "taskcalendarapp-bf3b3",
  storageBucket: "taskcalendarapp-bf3b3.firebasestorage.app",
  messagingSenderId: "482463811896",
  appId: "1:482463811896:web:11700779551db85f8c59cd",
  measurementId: "G-4V1NYWDVKF"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const backBtn = document.getElementById('back-btn');
const statusList = document.getElementById('status-list');
const newStatusInput = document.getElementById('new-status');
const addStatusBtn = document.getElementById('add-status-btn');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
backBtn.addEventListener('click', () => {
  window.location.href = 'index.html';
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ Firebase
async function loadStatuses() {
  const user = auth.currentUser;
  if (!user) return;

  const statusesRef = collection(db, `users/${user.uid}/statuses`);
  const statusesSnapshot = await getDocs(statusesRef);
  
  const statuses = statusesSnapshot.docs.map(doc => doc.data().name);
  renderStatuses(statuses);
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
function renderStatuses(statuses) {
  statusList.innerHTML = '';
  statuses.forEach((status, index) => {
    const statusItem = document.createElement('li');
    statusItem.classList.add('draggable');
    statusItem.dataset.index = index;

    statusItem.innerHTML = `
      <span>${status}</span>
      <button class="edit-status-btn">‚úèÔ∏è</button>
      <button class="delete-status-btn">üóëÔ∏è</button>
      <button class="move-up-btn">‚Üë</button>
      <button class="move-down-btn">‚Üì</button>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    statusItem.querySelector('.edit-status-btn').addEventListener('click', () => {
      const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å—Ç–∞—Ç—É—Å–∞:', status);
      if (newName && newName.trim() !== '') {
        editStatus(status, newName.trim());
      }
    });

    statusItem.querySelector('.delete-status-btn').addEventListener('click', () => {
      if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å "${status}"?`)) {
        deleteStatus(status);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    statusItem.querySelector('.move-up-btn').addEventListener('click', () => {
      moveStatusUp(index);
    });

    statusItem.querySelector('.move-down-btn').addEventListener('click', () => {
      moveStatusDown(index);
    });

    statusList.appendChild(statusItem);
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
addStatusBtn.addEventListener('click', async () => {
  const newStatus = newStatusInput.value.trim();
  if (newStatus) {
    const user = auth.currentUser;
    if (!user) return;

    await addDoc(collection(db, `users/${user.uid}/statuses`), { name: newStatus });
    newStatusInput.value = ''; // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
    loadStatuses(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
async function editStatus(oldName, newName) {
  const user = auth.currentUser;
  if (!user) return;

  const statusesRef = collection(db, `users/${user.uid}/statuses`);
  const statusesSnapshot = await getDocs(statusesRef);

  statusesSnapshot.forEach(async docSnapshot => {
    if (docSnapshot.data().name === oldName) {
      await setDoc(docSnapshot.ref, { name: newName }, { merge: true });
    }
  });

  await updatePageStatuses(oldName, newName); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
  loadStatuses(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
async function deleteStatus(statusName) {
  const user = auth.currentUser;
  if (!user) return;

  const statusesRef = collection(db, `users/${user.uid}/statuses`);
  const statusesSnapshot = await getDocs(statusesRef);

  statusesSnapshot.forEach(async docSnapshot => {
    if (docSnapshot.data().name === statusName) {
      await deleteDoc(docSnapshot.ref);
    }
  });

  loadStatuses(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
async function updatePageStatuses(oldStatus, newStatus) {
  const user = auth.currentUser;
  if (!user) return;

  const pagesRef = collection(db, `users/${user.uid}/pages`);
  const pagesSnapshot = await getDocs(pagesRef);

  pagesSnapshot.forEach(async docSnapshot => {
    const pageData = docSnapshot.data();
    const statusProperty = pageData.properties.find(prop => prop.type === 'status');
    
    if (statusProperty && statusProperty.value === oldStatus) {
      statusProperty.value = newStatus;
      await setDoc(docSnapshot.ref, { properties: pageData.properties }, { merge: true });
    }
  });
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–≤–µ—Ä—Ö
async function moveStatusUp(index) {
  const statusesRef = collection(db, `users/${auth.currentUser.uid}/statuses`);
  const statusesSnapshot = await getDocs(statusesRef);
  const statuses = statusesSnapshot.docs.map(doc => doc.data().name);

  if (index > 0) {
    const temp = statuses[index];
    statuses[index] = statuses[index - 1];
    statuses[index - 1] = temp;
    await updateStatusesInDatabase(statuses); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  }
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–∏–∑
async function moveStatusDown(index) {
  const statusesRef = collection(db, `users/${auth.currentUser.uid}/statuses`);
  const statusesSnapshot = await getDocs(statusesRef);
  const statuses = statusesSnapshot.docs.map(doc => doc.data().name);

  if (index < statuses.length - 1) {
    const temp = statuses[index];
    statuses[index] = statuses[index + 1];
    statuses[index + 1] = temp;
    await updateStatusesInDatabase(statuses); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function updateStatusesInDatabase(statuses) {
  const user = auth.currentUser;
  if (!user) return;

  const statusesRef = collection(db, `users/${user.uid}/statuses`);
  const statusesSnapshot = await getDocs(statusesRef);
  const docRefs = statusesSnapshot.docs.map(doc => doc.ref);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º
  for (let i = 0; i < statuses.length; i++) {
    await setDoc(docRefs[i], { name: statuses[i] }, { merge: true });
  }

  loadStatuses(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
onAuthStateChanged(auth, (user) => {
  if (user) {
    loadStatuses();
  } else {
    alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
    window.location.href = 'login.html';
  }
});
